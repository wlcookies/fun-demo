plugins {
    id 'com.android.application'
}

android {
    compileSdk rootProject.ext.compile_sdk_version

    viewBinding {
        enabled = true
    }

    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdk rootProject.ext.min_sdk_version
        targetSdk rootProject.ext.target_sdk_version
        versionCode rootProject.ext.version_code
        versionName rootProject.ext.version_name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file("${getRootDir()}\\android_aosp.jks")
            storePassword 'bmi2021'
            keyAlias 'aosp'
            keyPassword 'bmi2021'
        }

        release {
            storeFile file("${getRootDir()}\\android_aosp.jks")
            storePassword 'bmi2021'
            keyAlias 'aosp'
            keyPassword 'bmi2021'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    applicationVariants.all {
        variant ->
            variant.outputs.all {
                if (variant.buildType.name == 'release') {
                    getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + File.separator + "release")
                    outputFileName = "fun-demo.apk"
                }
            }
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            Set<File> fileSet = options.bootstrapClasspath.getFiles()
            List<File> newFileList = new ArrayList<>()
            //"../framework.jar" 为相对位置，需要参照着修改，或者用绝对位置
            newFileList.add(new File("sdk/framework.jar"))
            newFileList.addAll(fileSet)
            options.bootstrapClasspath = files(newFileList.toArray())
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main {
            assets {
                srcDirs 'src\\main\\assets'
            }
        }
    }
}

preBuild {
    doLast {
        def imlFile = file("../.idea/modules/app/" + project.parent.name + "." + project.name + ".iml")
        try {
            def parsedXml = (new XmlParser()).parse(imlFile)
            def jdkNode = parsedXml.component[1].orderEntry.find { it.'@type' == 'jdk' }
            parsedXml.component[1].remove(jdkNode)
            def sdkString = "Android API " + android.compileSdkVersion.substring("Android-".length()) + " Platform"
            new Node(parsedXml.component[1], 'orderEntry', ['type': 'jdk', 'jdkName': sdkString, 'jdkType': 'Android SDK'])
            groovy.xml.XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))
        } catch (FileNotFoundException e) {
        }
    }
}

dependencies {
    compileOnly files('sdk/framework.jar')
    implementation fileTree(include: ['*.jar','*.aar'], dir: 'libs')

    implementation "androidx.appcompat:appcompat:${rootProject.ext.appcompat_version}"
    implementation "com.google.android.material:material:${rootProject.ext.material_version}"
    implementation "androidx.constraintlayout:constraintlayout:2.1.3"

    testImplementation "junit:junit:${rootProject.ext.junit_version}"
    androidTestImplementation "androidx.test.ext:junit:${rootProject.ext.ext_junit_version}"
    androidTestImplementation "androidx.test.espresso:${rootProject.ext.espresso_core_version}"

    // 通用模块
    implementation project(path: ':common-module')

    // androidX media2
    implementation "androidx.media2:media2-session:${rootProject.ext.media2_version}"
    implementation "androidx.media2:media2-widget:${rootProject.ext.media2_version}"
    implementation "androidx.media2:media2-player:${rootProject.ext.media2_version}"

    // 列表适配器
    implementation "com.github.CymChad:BaseRecyclerViewAdapterHelper:${rootProject.ext.BaseRecyclerViewAdapterHelper_version}"
    implementation "androidx.recyclerview:recyclerview:${rootProject.ext.recyclerview_version}"

    // Lifecycle 扩展
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"

    // GSON
    implementation "com.google.code.gson:gson:$gson_version"

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    implementation "com.airbnb.android:lottie:5.2.0"
}

